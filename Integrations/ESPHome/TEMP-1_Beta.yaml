substitutions:
  name: apollo-temp-1_beta
  version: "25.2.23.1"
  device_description: ${name} made by Apollo Automation - version ${version}.

esphome:
  name: "${name}"
  friendly_name: Apollo TEMP-1_Beta
  comment: Apollo TEMP-1_Beta
  name_add_mac_suffix: true
  platformio_options:
    board_build.flash_mode: dio

  project:
    name: "ApolloAutomation.TEMP-1_Beta"
    version: "${version}"

  min_version: 2025.6.0
  on_boot:
    priority: 500
    then:
      - switch.turn_on: accessory_power
      - lambda: |-
          id(deep_sleep_1).set_run_duration(id(deep_sleep_run_duration).state * 1000);
          id(deep_sleep_1).set_sleep_duration(id(deep_sleep_sleep_duration).state * 60 * 60 * 1000);
      - if:
          condition:
            or:
              - binary_sensor.is_on: ota_mode
              - switch.is_on: prevent_sleep
          then:
             - lambda: |- 
                ESP_LOGW("Apollo", "Preventing Deep Sleep Due To OTA On Boot");
                id(deep_sleep_1).prevent_deep_sleep(); 

      - if:
          condition:
            switch.is_on: notify_only_outside_temp_difference
          then:
            - logger.log: "Apollo Automation: Notify Only Outside Temp Difference"
            - delay: 2s
            - if: # Check If Temp Probe Is Outside Threshold
                condition:
                  - lambda: |-
                      return std::abs(id(temp_probe).state - id(last_temp)) > id(temp_diff_threshold)->state;
                then: # If So Then Turn On Wifi To Update
                  - logger.log: "Apollo Automation: Outside Temp Change Detected"
                  - wifi.enable:
                  - lambda: |-
                      id(last_temp) = id(temp_probe).state;
                else: # If Not Then Check OTA And Sleep
                  - if:
                      condition:
                        and:
                          - binary_sensor.is_off: ota_mode
                          - switch.is_off: prevent_sleep
                      then:
                      - switch.turn_off: accessory_power
                      - deep_sleep.enter:
                          id: deep_sleep_1
                  
  on_shutdown:
    - light.turn_off: rgb_light
    - switch.turn_off: accessory_power

dashboard_import:
  package_import_url: github://ApolloAutomation/TEMP-1/Integrations/ESPHome/TEMP-1_Beta.yaml
  import_full_config: false

improv_serial:

esp32_improv:
  authorizer: none

ota:
  - platform: esphome
    id: ota_esphome
  - platform: http_request
    id: ota_managed

http_request:
  verify_ssl: true

safe_mode:


wifi:
  id: wifi_1
  on_connect:
    - delay: 5s
    - ble.disable:
  on_disconnect:
    - ble.enable:
  ap:
    ssid: "Apollo TEMP1 Hotspot"

logger:

esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: esp-idf
    version: 4.4.8
    platform_version: 5.4.0   

api:
  services:
    - service: play_buzzer
      variables:
        song_str: string
      then:
        - rtttl.play:
            rtttl: !lambda 'return song_str;'
  reboot_timeout: 0s
  on_client_connected:
    then:
      - delay: 5s
      - if:
          condition:
            or:
              - binary_sensor.is_on: ota_mode
              - switch.is_on: prevent_sleep
          then:
            - lambda: |- 
                ESP_LOGW("Apollo", "Preventing Deep Sleep Due To OTA Or Switch");
                id(deep_sleep_1).prevent_deep_sleep(); 
          else: 
            - if:
                condition:
                  switch.is_on: sleep_after_connecting
                then:
                  - switch.turn_off: accessory_power
                  - deep_sleep.enter:
                      id: deep_sleep_1


globals:
  - id: cycleCounter
    type: int
    restore_value: no
    initial_value: '0'
  - id: button_press_timestamp
    restore_value: no
    type: uint32_t
    initial_value: '0'
  - id: last_temp
    type: float
    restore_value: yes
    initial_value: '0.0'

captive_portal:

web_server:
  port: 80

external_components:
  - source: github://ApolloAutomation/esphome-battery-component
    components: [max17048] #Forked OptionZero

i2c:
  sda: GPIO1
  scl: GPIO0
  id: bus_a

one_wire:
  - platform: gpio
    pin: GPIO5

# Buzzer
output:
  - platform: ledc
    pin: GPIO10
    id: buzzer
rtttl:
 output: buzzer


deep_sleep:
  id: deep_sleep_1
  sleep_duration: 8h
  run_duration: 30s


number:
  - platform: template
    name: Board Temperature Offset
    id: aht_temperature_offset
    restore_value: true
    initial_value: 0.0
    min_value: -70.0
    max_value: 70.0
    entity_category: "CONFIG"
    unit_of_measurement: "째C"
    optimistic: true
    update_interval: never
    step: 0.1
    mode: box

  - platform: template
    name: Board Humidity Offset
    id: aht_humidity_offset
    restore_value: true
    initial_value: 0
    min_value: -70.0
    max_value: 70.0
    entity_category: "CONFIG"
    unit_of_measurement: "%"
    optimistic: true
    update_interval: never
    step: 0.1
    mode: box

  - platform: template
    name: Max Probe Temp
    id: max_temp
    restore_value: true
    initial_value: 125.0
    min_value: -55.0
    max_value: 125.0
    entity_category: "CONFIG"
    unit_of_measurement: "째C"
    optimistic: true
    update_interval: never
    step: 0.1
    mode: box

  - platform: template
    name: Min Probe Temp
    id: min_temp
    restore_value: true
    initial_value: -55.0
    min_value: -55.0
    max_value: 125.0
    entity_category: "CONFIG"
    unit_of_measurement: "째C"
    optimistic: true
    update_interval: never
    step: 0.1
    mode: box

  - platform: template
    name: Probe Temp Difference Threshold
    id: temp_diff_threshold
    restore_value: true
    initial_value: 0.0
    min_value: -55.0
    max_value: 125.0
    entity_category: "CONFIG"
    unit_of_measurement: "째C"
    optimistic: true
    update_interval: never
    step: 0.1
    mode: box

  - platform: template
    name: "Run Duration"
    id: deep_sleep_run_duration
    min_value: 1
    max_value: 800
    step: 1
    mode: box
    update_interval: never
    optimistic: true
    restore_value: true
    initial_value: 30
    icon: "mdi:arrow-collapse-right"
    entity_category: CONFIG
    unit_of_measurement: "s"
    on_value:
      then:
        - lambda: |-
            id(deep_sleep_1).set_run_duration(x * 1000);
  
  - platform: template
    name: "Sleep Duration"
    id: deep_sleep_sleep_duration
    min_value: 0
    max_value: 800
    step: 1
    mode: box
    update_interval: never
    optimistic: true
    restore_value: true
    initial_value: 8
    icon: "mdi:arrow-collapse-right"
    entity_category: CONFIG
    unit_of_measurement: "h"
    on_value:
      then:
        - lambda: |-
            id(deep_sleep_1).set_sleep_duration(x * 60 * 60 * 1000);
    

binary_sensor:
  - platform: status
    name: Online
    id: ink_ha_connected
  - platform: gpio
    pin: 
      number: GPIO9
      inverted: true
      mode:
        input: true
        pullup: true
    id: reset_button
    on_press:
      then:
        - lambda: |-
            id(button_press_timestamp) = millis();    
    on_release:
      then:
        - lambda: |-
            if (millis() - id(button_press_timestamp) >= 10000) {
              // Remove Wifi
              id(factory_reset_switch).turn_on();
            }
            else if (millis() - id(button_press_timestamp) >= 1000) {
              //Turn Prevent Sleep On
              id(prevent_sleep).turn_on();
              //Prevent Sleep
              id(deep_sleep_1).prevent_deep_sleep();
            }
            else {
              // StatusCheck
              id(statusCheck).execute();
            }
  - platform: homeassistant
    name: "OTA Mode"
    id: ota_mode
    entity_id: input_boolean.ota_mode
    on_press:
      then:
        - lambda: |- 
            id(deep_sleep_1).prevent_deep_sleep();
    on_release:  
      then:
        - if:
            condition:
              switch.is_off: prevent_sleep
            then:
              - lambda: |- 
                  id(deep_sleep_1).allow_deep_sleep();

sensor:
  - platform: internal_temperature
    name: "ESP Temperature"
    id: sys_esp_temperature

  - platform: uptime
    name: Uptime
    id: sys_uptime
    update_interval: 60s

  - platform: wifi_signal
    name: RSSI
    id: wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"

  - platform: dallas_temp
    name: "Temperature Probe"
    update_interval: 5s
    id: temp_probe
    on_value:
      if:
        condition:
          switch.is_on: alarm_outside_temp_range
        then:
          - lambda: |-
              id(tempRangeCheck).execute();
    
  - platform: aht10
    variant: AHT20
    id: aht20
    temperature:
      name: "Board Temperature"
      filters:
        - lambda: return x - id(aht_temperature_offset).state;
    humidity:
      name: "Board Humidity"
      filters:
        - lambda: return x - id(aht_humidity_offset).state;
    update_interval: 5s

  - platform: max17048
    battery_voltage:
      name: Battery voltage
      id: batt_v
    battery_level:
      name: Battery level
      id: batt_pct
      filters:
        - lambda: |
            if (x > 100) return 100;
            else return (x);

light:
  - platform: esp32_rmt_led_strip
    id: rgb_light
    name: "RGB Light"
    pin: GPIO3
    rmt_channel: 0
    default_transition_length: 0s
    chipset: WS2812
    num_leds: 1
    rgb_order: grb
    effects:
      - pulse:
          name: "Slow Pulse"
          transition_length: 1000ms
          update_interval: 1000ms
          min_brightness: 0%
          max_brightness: 100%
      - pulse:
          name: "Fast Pulse"
          transition_length: 100ms
          update_interval: 100ms
          min_brightness: 50%
          max_brightness: 100%

button:
  - platform: restart
    icon: mdi:power-cycle
    name: "ESP Reboot"

  - platform: factory_reset
    disabled_by_default: True
    name: "Factory Reset ESP"
    id: factory_reset_all


switch:
  - platform: factory_reset
    id: factory_reset_switch
    internal: true
  - platform: gpio
    pin: GPIO4
    name: "Accessory Power"
    id: accessory_power
  - platform: template
    name: "Alarm Outside Temp Range"
    id: alarm_outside_temp_range    
    optimistic: true
  - platform: template
    name: "Prevent Sleep"
    id: prevent_sleep
    icon: mdi:sleep
    restore_mode: RESTORE_DEFAULT_ON
    optimistic: true
    entity_category: "config"
    on_turn_on:
      then:
        - lambda: |- 
            id(deep_sleep_1).prevent_deep_sleep();
    on_turn_off:
      then:
        - if:
            condition:
              binary_sensor.is_off: ota_mode
            then:
              - lambda: |- 
                  id(deep_sleep_1).allow_deep_sleep();
  - platform: template
    name: "Sleep After Connecting"
    id: sleep_after_connecting
    icon: mdi:sleep
    restore_mode: RESTORE_DEFAULT_ON
    optimistic: true

  - platform: template
    name: Notify Only Outside Temp Difference
    id: notify_only_outside_temp_difference
    icon: mdi:thermometer
    restore_mode: RESTORE_DEFAULT_OFF
    optimistic: true
    entity_category: "config"



script:
  - id: statusCheck
    then:
      - if:
          condition:
            - lambda: 'return id(ink_ha_connected).state;'
          then:
            - logger.log: "Apollo Automation: Connected To HA"
            - light.turn_on: 
                id: rgb_light
                brightness: 100%
                red: 0%
                green: 0%
                blue: 100%
          else:
            - if:
                condition:
                  - wifi.connected
                then:
                  - logger.log: "Apollo Automation: Connected To Wifi"
                  - light.turn_on: 
                      id: rgb_light
                      brightness: 100%
                      red: 0%
                      green: 100%
                      blue: 0%
                else:
                  - logger.log: "Apollo Automation: Not Connected To Wifi"
                  - light.turn_on: 
                      id: rgb_light
                      brightness: 100%
                      red: 100%
                      green: 100%
                      blue: 0%
      - delay: 5s
      - light.turn_off: rgb_light

  - id: tempRangeCheck
    then:
      - if:
          condition:
            or:
              - lambda: 'return id(max_temp)->state < id(temp_probe).state;'
              - lambda: 'return id(temp_probe).state < id(min_temp)->state;'
          then:
            - rtttl.play:
                rtttl: "return siren:d=8,o=5,b=100:d,e,d,e,d,e,d,e;"

